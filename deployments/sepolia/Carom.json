{
  "address": "0x199b3E721878672fF4319176a12A7Ac274e5dD60",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address[3]",
          "name": "_coins",
          "type": "address[3]"
        },
        {
          "internalType": "address",
          "name": "_pool_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_admin_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenSupply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int128",
          "name": "soldId",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int128",
          "name": "boughtId",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        }
      ],
      "name": "TokenExchange",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "amounts",
          "type": "uint256[3]"
        },
        {
          "internalType": "uint256",
          "name": "minMintAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin_fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "amounts",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool",
          "name": "deposit",
          "type": "bool"
        }
      ],
      "name": "calcTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "coins",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "i",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "j",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min_dy",
          "type": "uint256"
        }
      ],
      "name": "exchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVirtualPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "i",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "j",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "get_dy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "amounts",
          "type": "uint256[3]"
        },
        {
          "internalType": "uint256",
          "name": "minMintAmount",
          "type": "uint256"
        }
      ],
      "name": "initialAddLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract MyToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3c0f85c4a351bf32c0f8399d77e0745da6cc095eb145490f2969bb3971e8a65e",
  "receipt": {
    "to": null,
    "from": "0x999268c31D393f4747D6feb43540442bea55942c",
    "contractAddress": "0x199b3E721878672fF4319176a12A7Ac274e5dD60",
    "transactionIndex": 49,
    "gasUsed": "3066802",
    "logsBloom": "0x
    "blockHash": "0x96ea44f0ade7212342baef3b285163bbeaf42f6bb895570808ead7eb4f43db11",
    "transactionHash": "0x3c0f85c4a351bf32c0f8399d77e0745da6cc095eb145490f2969bb3971e8a65e",
    "logs": [],
    "blockNumber": 6026581,
    "cumulativeGasUsed": "9580517",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x999268c31D393f4747D6feb43540442bea55942c",
    [
      "0xFb906D2A2fecDBCfc2DEEDeae7b8e64338E71830",
      "0x959f3a23bE1c40912cE71348162D54e4bf2cf600",
      "0xf6065b2b8EB8799c6B1ba3A4fF0B9cb9a23f6075"
    ],
    "0x03fC90Ca8eA11c0dcDD128c5C5CAFc71c6408267",
    3000000,
    50000000
  ],
  "numDeployments": 1,
  "solcInputHash": "a863d12282db630ddc928253e06edbd7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"_coins\",\"type\":\"address[3]\"},{\"internalType\":\"address\",\"name\":\"_pool_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_admin_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSupply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"soldId\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"boughtId\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"minMintAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"}],\"name\":\"calcTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_dy\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVirtualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"get_dy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"minMintAmount\",\"type\":\"uint256\"}],\"name\":\"initialAddLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract MyToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Carom_fin.sol\":\"Carom\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/Carom_fin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface MyToken {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function mint(address _to, uint256 _value) external returns (bool);\\r\\n\\r\\n    function burnFrom(address _to, uint256 _value) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract Carom is ReentrancyGuard {\\r\\n    // Events\\r\\n    event TokenExchange(\\r\\n        address indexed buyer,\\r\\n        int128 soldId,\\r\\n        uint256 tokensSold,\\r\\n        int128 boughtId,\\r\\n        uint256 tokensBought\\r\\n    );\\r\\n\\r\\n    event AddLiquidity(\\r\\n        address indexed provider,\\r\\n        uint256[] tokenAmounts,\\r\\n        uint256[] fees,\\r\\n        uint256 invariant,\\r\\n        uint256 tokenSupply\\r\\n    );\\r\\n\\r\\n    uint256 private constant FEE_DENOMINATOR = 10 ** 10;\\r\\n    uint256 private constant PRECISION = 10 ** 18;\\r\\n\\r\\n    address[3] public coins;\\r\\n    uint256[3] public balances;\\r\\n    uint256 public fee; // fee * 1e10\\r\\n    uint256 public admin_fee; // admin_fee * 1e10\\r\\n\\r\\n    address public owner;\\r\\n    MyToken public token;\\r\\n\\r\\n    uint256[3] private RATES = [\\r\\n        1 ether,\\r\\n        1000000000000 ether,\\r\\n        1000000000000 ether\\r\\n    ];\\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        address[3] memory _coins,\\r\\n        address _pool_token,\\r\\n        uint256 _fee,\\r\\n        uint256 _admin_fee\\r\\n    ) {\\r\\n        for (uint256 i = 0; i < 3; i++) {\\r\\n            require(_coins[i] != address(0), \\\"Coin address cannot be zero\\\");\\r\\n        }\\r\\n        coins = _coins;\\r\\n        fee = _fee;\\r\\n        admin_fee = _admin_fee;\\r\\n        owner = _owner;\\r\\n        token = MyToken(_pool_token);\\r\\n    }\\r\\n\\r\\n    function _xp() internal view returns (uint256[3] memory) {\\r\\n        uint256[3] memory result;\\r\\n        for (uint256 i = 0; i < 3; i++) {\\r\\n            result[i] = (RATES[i] * balances[i]) / PRECISION;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function _xp_mem(\\r\\n        uint256[3] memory _balances\\r\\n    ) internal view returns (uint256[3] memory) {\\r\\n        uint256[3] memory result;\\r\\n        for (uint256 i = 0; i < 3; i++) {\\r\\n            result[i] = (RATES[i] * _balances[i]) / PRECISION;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function get_D(\\r\\n        uint256[3] memory xp,\\r\\n        uint256 amp\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 S = 0;\\r\\n        for (uint256 i = 0; i < 3; i++) {\\r\\n            S += xp[i];\\r\\n        }\\r\\n        if (S == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 D = S;\\r\\n        uint256 Ann = amp * 3;\\r\\n        for (uint i = 0; i < 255; i++) {\\r\\n            uint256 D_P = D;\\r\\n            for (uint256 j = 0; j < 3; j++) {\\r\\n                D_P = (D_P * D) / (xp[j] * 3);\\r\\n            }\\r\\n            uint256 Dprev = D;\\r\\n            D = ((Ann * S + D_P * 3) * D) / ((Ann - 1) * D + (3 + 1) * D_P);\\r\\n\\r\\n            if (D > Dprev && D - Dprev <= 1) {\\r\\n                break;\\r\\n            } else if (Dprev - D <= 1) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        return D;\\r\\n    }\\r\\n\\r\\n    function get_D_mem(\\r\\n        uint256[3] memory _balances,\\r\\n        uint256 amp\\r\\n    ) internal view returns (uint256) {\\r\\n        return get_D(_xp_mem(_balances), amp);\\r\\n    }\\r\\n\\r\\n    function getVirtualPrice() external view returns (uint256) {\\r\\n        uint256 D = get_D(_xp(), 2000);\\r\\n        uint256 tokenSupply = token.totalSupply();\\r\\n        if (tokenSupply == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        return (D * PRECISION) / tokenSupply;\\r\\n    }\\r\\n\\r\\n    function calcTokenAmount(\\r\\n        uint256[3] calldata amounts,\\r\\n        bool deposit\\r\\n    ) external view returns (uint256) {\\r\\n        uint256[3] memory _balances = balances;\\r\\n        uint256 D0 = get_D_mem(_balances, 2000);\\r\\n\\r\\n        for (uint i = 0; i < 3; i++) {\\r\\n            if (deposit) {\\r\\n                _balances[i] += amounts[i];\\r\\n            } else {\\r\\n                require(_balances[i] >= amounts[i], \\\"Insufficient balance\\\");\\r\\n                _balances[i] -= amounts[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 D1 = get_D_mem(_balances, 2000);\\r\\n        uint256 tokenAmount = token.totalSupply();\\r\\n        uint256 diff = deposit ? D1 - D0 : D0 - D1;\\r\\n\\r\\n        if (D0 == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return (diff * tokenAmount) / D0;\\r\\n    }\\r\\n\\r\\n    function initialAddLiquidity(\\r\\n        uint256[3] calldata amounts,\\r\\n        uint256 minMintAmount\\r\\n    ) external payable nonReentrant {\\r\\n        uint256[3] memory newBalances = balances;\\r\\n        uint256[3] memory fees;\\r\\n\\r\\n        // Ensure initial amounts are non-zero\\r\\n        require(\\r\\n            amounts[0] > 0 && amounts[1] > 0 && amounts[2] > 0,\\r\\n            \\\"Initial deposit requires all coins to be non-zero\\\"\\r\\n        );\\r\\n\\r\\n        // Update newBalances with the transferred amounts\\r\\n        for (uint256 i = 0; i < 3; ++i) {\\r\\n            if (amounts[i] > 0) {\\r\\n                IERC20 inCoin = IERC20(coins[i]);\\r\\n                uint256 balanceBefore = inCoin.balanceOf(address(this));\\r\\n                inCoin.transferFrom(msg.sender, address(this), amounts[i]);\\r\\n                uint256 balanceAfter = inCoin.balanceOf(address(this));\\r\\n                newBalances[i] = balanceAfter - balanceBefore;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Calculate D1 based on newBalances\\r\\n        uint256 D1 = get_D_mem(newBalances, 2000);\\r\\n        uint256 mintAmount = (D1 * 1e18) / PRECISION;\\r\\n\\r\\n        // Ensure the mint amount meets the minimum requirement\\r\\n        require(\\r\\n            mintAmount >= minMintAmount,\\r\\n            \\\"Mint amount below minimum mint amount\\\"\\r\\n        );\\r\\n\\r\\n        // Mint the initial liquidity tokens\\r\\n        token.mint(msg.sender, mintAmount);\\r\\n\\r\\n        // Update balances\\r\\n        for (uint256 i = 0; i < 3; ++i) {\\r\\n            balances[i] = newBalances[i];\\r\\n        }\\r\\n\\r\\n        // Prepare event data\\r\\n        uint256[] memory dynamicAmounts = new uint256[](3);\\r\\n        uint256[] memory dynamicFees = new uint256[](3);\\r\\n        for (uint256 i = 0; i < 3; i++) {\\r\\n            dynamicAmounts[i] = amounts[i];\\r\\n            dynamicFees[i] = fees[i];\\r\\n        }\\r\\n\\r\\n        // Emit AddLiquidity event\\r\\n        emit AddLiquidity(\\r\\n            msg.sender,\\r\\n            dynamicAmounts,\\r\\n            dynamicFees,\\r\\n            D1,\\r\\n            mintAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(\\r\\n        uint256[3] calldata amounts,\\r\\n        uint256 minMintAmount\\r\\n    ) external payable nonReentrant {\\r\\n        uint256[3] memory fees;\\r\\n        uint256 _fee = (fee * 3) / (4 * (3 - 1));\\r\\n        uint256 _adminFee = admin_fee;\\r\\n\\r\\n        uint256 tokenSupply = token.totalSupply();\\r\\n        require(tokenSupply > 0, \\\"Token supply must be greater than 0\\\");\\r\\n\\r\\n        uint256 D0 = get_D_mem(balances, 2000);\\r\\n        uint256[3] memory newBalances = balances;\\r\\n\\r\\n        for (uint256 i = 0; i < 3; ++i) {\\r\\n            if (amounts[i] > 0) {\\r\\n                IERC20 inCoin = IERC20(coins[i]);\\r\\n                uint256 balanceBefore = inCoin.balanceOf(address(this));\\r\\n                inCoin.transferFrom(msg.sender, address(this), amounts[i]);\\r\\n                uint256 balanceAfter = inCoin.balanceOf(address(this));\\r\\n                newBalances[i] = balances[i] + (balanceAfter - balanceBefore);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 D1 = get_D_mem(newBalances, 2000);\\r\\n        require(D1 > D0, \\\"D1 must be greater than D0\\\");\\r\\n\\r\\n        uint256 mintAmount = (tokenSupply * (D1 - D0)) / D0;\\r\\n        require(\\r\\n            mintAmount >= minMintAmount,\\r\\n            \\\"Mint amount below minimum mint amount\\\"\\r\\n        );\\r\\n\\r\\n        token.mint(msg.sender, mintAmount);\\r\\n\\r\\n        for (uint256 i = 0; i < 3; ++i) {\\r\\n            uint256 idealBalance = (D1 * balances[i]) / D0;\\r\\n            uint256 difference = idealBalance > newBalances[i]\\r\\n                ? idealBalance - newBalances[i]\\r\\n                : newBalances[i] - idealBalance;\\r\\n            fees[i] = (_fee * difference) / FEE_DENOMINATOR;\\r\\n            newBalances[i] -= fees[i];\\r\\n            balances[i] =\\r\\n                newBalances[i] -\\r\\n                (fees[i] * _adminFee) /\\r\\n                FEE_DENOMINATOR;\\r\\n        }\\r\\n\\r\\n        uint256[] memory dynamicAmounts = new uint256[](3);\\r\\n        uint256[] memory dynamicFees = new uint256[](3);\\r\\n        for (uint256 i = 0; i < 3; i++) {\\r\\n            dynamicAmounts[i] = amounts[i];\\r\\n            dynamicFees[i] = fees[i];\\r\\n        }\\r\\n\\r\\n        emit AddLiquidity(\\r\\n            msg.sender,\\r\\n            dynamicAmounts,\\r\\n            dynamicFees,\\r\\n            D1,\\r\\n            tokenSupply + mintAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function SCTU(int128 value) internal pure returns (uint256) {\\r\\n        require(value >= 0, \\\"Negative value not allowed\\\");\\r\\n        return uint256(uint128(value));\\r\\n    }\\r\\n\\r\\n    function get_y(\\r\\n        int128 i,\\r\\n        int128 j,\\r\\n        uint256 x,\\r\\n        uint256[3] memory xp_\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(i != j, \\\"Same coin\\\");\\r\\n        require(j >= 0 && SCTU(j) < 3, \\\"j out of range\\\");\\r\\n        require(i >= 0 && SCTU(i) < 3, \\\"i out of range\\\");\\r\\n\\r\\n        uint256 D = get_D(xp_, 2000);\\r\\n        uint256 c = D;\\r\\n        uint256 S_ = 0;\\r\\n        uint256 Ann = 6000;\\r\\n\\r\\n        uint256 _x = 0;\\r\\n        for (uint256 _i = 0; _i < 3; _i++) {\\r\\n            if (_i == SCTU(i)) {\\r\\n                _x = x;\\r\\n            } else if (_i != SCTU(j)) {\\r\\n                _x = xp_[_i];\\r\\n            } else {\\r\\n                continue;\\r\\n            }\\r\\n            S_ += _x;\\r\\n            c = (c * D) / (_x * 3);\\r\\n            require(c >= D, \\\"Overflow in c calculation\\\"); // Added check\\r\\n        }\\r\\n        c = (c * D) / (Ann * 3);\\r\\n        uint256 b = S_ + D / Ann;\\r\\n        uint256 y_prev = 0;\\r\\n        uint256 y = D;\\r\\n        for (uint256 _i = 0; _i < 255; _i++) {\\r\\n            y_prev = y;\\r\\n            y = (y * y + c) / (2 * y + b - D);\\r\\n            if (y > y_prev && y - y_prev <= 1) {\\r\\n                break;\\r\\n            } else if (y_prev - y <= 1) {\\r\\n                break;\\r\\n            }\\r\\n            require(y >= y_prev, \\\"Overflow in y calculation\\\"); // Added check\\r\\n        }\\r\\n        return y;\\r\\n    }\\r\\n\\r\\n    function get_dy(\\r\\n        int128 i,\\r\\n        int128 j,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256) {\\r\\n        uint256[3] memory rates = RATES;\\r\\n        uint256[3] memory xp = _xp();\\r\\n\\r\\n        uint256 x = xp[SCTU(i)] + (dx * rates[SCTU(i)]) / PRECISION;\\r\\n        uint256 y = get_y(i, j, x, xp);\\r\\n        uint256 dy = ((xp[SCTU(j)] - y - 1) * PRECISION) / rates[SCTU(j)];\\r\\n        uint256 _fee = (fee * dy) / FEE_DENOMINATOR;\\r\\n        return dy - _fee;\\r\\n    }\\r\\n\\r\\n    function exchange(\\r\\n        int128 i,\\r\\n        int128 j,\\r\\n        uint256 dx,\\r\\n        uint256 min_dy\\r\\n    ) external nonReentrant {\\r\\n        uint256 index_i = SCTU(i);\\r\\n        uint256 index_j = SCTU(j);\\r\\n        address input_coin = coins[index_i];\\r\\n        address output_coin = coins[index_j];\\r\\n        uint256 initial_balance = IERC20(input_coin).balanceOf(address(this));\\r\\n\\r\\n        bool success = IERC20(input_coin).transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            dx\\r\\n        );\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n\\r\\n        uint256 dx_w_fee = index_i == 2\\r\\n            ? IERC20(input_coin).balanceOf(address(this)) - initial_balance\\r\\n            : dx;\\r\\n\\r\\n        uint256[3] memory xp = _xp();\\r\\n        uint256 x = xp[index_i] + (dx_w_fee * RATES[index_i]) / PRECISION;\\r\\n        require(x >= xp[index_i], \\\"Overflow in x calculation\\\");\\r\\n\\r\\n        uint256 y = get_y(\\r\\n            int128(int256(index_i)),\\r\\n            int128(int256(index_j)),\\r\\n            x,\\r\\n            xp\\r\\n        );\\r\\n\\r\\n        uint256 dy = xp[index_j] - y - 1;\\r\\n        uint256 dy_fee = (dy * fee) / FEE_DENOMINATOR;\\r\\n        uint256 dy_admin_fee = (((dy_fee * admin_fee) / FEE_DENOMINATOR) *\\r\\n            PRECISION) / RATES[index_j];\\r\\n        dy = ((dy - dy_fee) * PRECISION) / RATES[index_j];\\r\\n\\r\\n        require(dy >= min_dy, \\\"Exchange resulted in fewer coins than expected\\\");\\r\\n\\r\\n        balances[index_i] += dx_w_fee;\\r\\n        balances[index_j] -= (dy + dy_admin_fee);\\r\\n\\r\\n        success = IERC20(output_coin).transfer(msg.sender, dy);\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n\\r\\n        // emit TokenExchange(msg.sender, i, dx, j, dy);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa56b22f8862c74cd350e9c4d72cb78d58f029f4f39749b69fd5955dd2b90333e\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060600160405280670de0b6b3a76400006cffffffffffffffffffffffffff1681526020016c0c9f2c9cd04674edea400000006cffffffffffffffffffffffffff1681526020016c0c9f2c9cd04674edea400000006cffffffffffffffffffffffffff16815250600b906003620000809291906200021b565b503480156200008e57600080fd5b50604051620038a1380380620038a18339818101604052810190620000b4919062000524565b600160008190555060005b60038110156200016b57600073ffffffffffffffffffffffffffffffffffffffff16858260038110620000f757620000f6620005ac565b5b602002015173ffffffffffffffffffffffffffffffffffffffff160362000155576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200014c906200063c565b60405180910390fd5b808062000162906200068d565b915050620000bf565b508360019060036200017f92919062000271565b50816007819055508060088190555084600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050620006da565b82600381019282156200025e579160200282015b828111156200025d57825182906cffffffffffffffffffffffffff169055916020019190600101906200022f565b5b5090506200026d9190620002f3565b5090565b8260038101928215620002e0579160200282015b82811115620002df5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000285565b5b509050620002ef9190620002f3565b5090565b5b808211156200030e576000816000905550600101620002f4565b5090565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200034e8262000321565b9050919050565b620003608162000341565b81146200036c57600080fd5b50565b600081519050620003808162000355565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003d6826200038b565b810181811067ffffffffffffffff82111715620003f857620003f76200039c565b5b80604052505050565b60006200040d62000312565b90506200041b8282620003cb565b919050565b600067ffffffffffffffff8211156200043e576200043d6200039c565b5b602082029050919050565b600080fd5b6000620004656200045f8462000420565b62000401565b9050806020840283018581111562000482576200048162000449565b5b835b81811015620004af57806200049a88826200036f565b84526020840193505060208101905062000484565b5050509392505050565b600082601f830112620004d157620004d062000386565b5b6003620004e08482856200044e565b91505092915050565b6000819050919050565b620004fe81620004e9565b81146200050a57600080fd5b50565b6000815190506200051e81620004f3565b92915050565b600080600080600060e086880312156200054357620005426200031c565b5b600062000553888289016200036f565b95505060206200056688828901620004b9565b945050608062000579888289016200036f565b93505060a06200058c888289016200050d565b92505060c06200059f888289016200050d565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f436f696e20616464726573732063616e6e6f74206265207a65726f0000000000600082015250565b600062000624601b83620005db565b91506200063182620005ec565b602082019050919050565b60006020820190508181036000830152620006578162000615565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200069a82620004e9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620006cf57620006ce6200065e565b5b600182019050919050565b6131b780620006ea6000396000f3fe6080604052600436106100a75760003560e01c8063a4bf044611610064578063a4bf0446146101d3578063c6610657146101ef578063ddca3f431461022c578063e25aa5fa14610257578063fc0c546a14610282578063fee3f7f9146102ad576100a7565b80633df02124146100ac5780634903b0d1146100d55780635e0d443f1461011257806361383eef1461014f5780638da5cb5b1461018c5780639dca8a4c146101b7575b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce9190612456565b6102d8565b005b3480156100e157600080fd5b506100fc60048036038101906100f791906124bd565b610884565b60405161010991906124f9565b60405180910390f35b34801561011e57600080fd5b5061013960048036038101906101349190612514565b61089f565b60405161014691906124f9565b60405180910390f35b34801561015b57600080fd5b50610176600480360381019061017191906125c6565b610a1f565b60405161018391906124f9565b60405180910390f35b34801561019857600080fd5b506101a1610c9c565b6040516101ae9190612647565b60405180910390f35b6101d160048036038101906101cc9190612662565b610cc2565b005b6101ed60048036038101906101e89190612662565b6112e5565b005b3480156101fb57600080fd5b50610216600480360381019061021191906124bd565b611b7c565b6040516102239190612647565b60405180910390f35b34801561023857600080fd5b50610241611bb2565b60405161024e91906124f9565b60405180910390f35b34801561026357600080fd5b5061026c611bb8565b60405161027991906124f9565b60405180910390f35b34801561028e57600080fd5b50610297611c9f565b6040516102a49190612701565b60405180910390f35b3480156102b957600080fd5b506102c2611cc5565b6040516102cf91906124f9565b60405180910390f35b6102e0611ccb565b60006102eb85611d11565b905060006102f885611d11565b90506000600183600381106103105761030f61271c565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006001836003811061034a5761034961271c565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103a99190612647565b602060405180830381865afa1580156103c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ea9190612760565b905060008373ffffffffffffffffffffffffffffffffffffffff166323b872dd33308b6040518463ffffffff1660e01b815260040161042b9392919061278d565b6020604051808303816000875af115801561044a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046e91906127d9565b9050806104b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a790612863565b60405180910390fd5b6000600287146104c05788610546565b828573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104fa9190612647565b602060405180830381865afa158015610517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053b9190612760565b61054591906128b2565b5b90506000610552611d73565b90506000670de0b6b3a7640000600b8a600381106105735761057261271c565b5b01548461058091906128e6565b61058a9190612957565b828a6003811061059d5761059c61271c565b5b60200201516105ac9190612988565b90508189600381106105c1576105c061271c565b5b6020020151811015610608576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ff90612a08565b60405180910390fd5b60006106168a8a8486611e0f565b90506000600182858c600381106106305761062f61271c565b5b602002015161063f91906128b2565b61064991906128b2565b905060006402540be4006007548361066191906128e6565b61066b9190612957565b90506000600b8c600381106106835761068261271c565b5b0154670de0b6b3a76400006402540be400600854856106a291906128e6565b6106ac9190612957565b6106b691906128e6565b6106c09190612957565b9050600b8c600381106106d6576106d561271c565b5b0154670de0b6b3a764000083856106ed91906128b2565b6106f791906128e6565b6107019190612957565b92508d831015610746576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073d90612a9a565b60405180910390fd5b8660048e6003811061075b5761075a61271c565b5b01600082825461076b9190612988565b92505081905550808361077e9190612988565b60048d600381106107925761079161271c565b5b0160008282546107a291906128b2565b925050819055508973ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b81526004016107e4929190612aba565b6020604051808303816000875af1158015610803573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082791906127d9565b975087610869576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086090612863565b60405180910390fd5b5050505050505050505050505061087e612147565b50505050565b6004816003811061089457600080fd5b016000915090505481565b600080600b6003806020026040519081016040528092919082600380156108db576020028201915b8154815260200190600101908083116108c7575b5050505050905060006108ec611d73565b90506000670de0b6b3a76400008361090389611d11565b600381106109145761091361271c565b5b60200201518661092491906128e6565b61092e9190612957565b8261093889611d11565b600381106109495761094861271c565b5b60200201516109589190612988565b9050600061096888888486611e0f565b905060008461097689611d11565b600381106109875761098661271c565b5b6020020151670de0b6b3a7640000600184876109a28d611d11565b600381106109b3576109b261271c565b5b60200201516109c291906128b2565b6109cc91906128b2565b6109d691906128e6565b6109e09190612957565b905060006402540be400826007546109f891906128e6565b610a029190612957565b90508082610a1091906128b2565b96505050505050509392505050565b6000806004600380602002604051908101604052809291908260038015610a5b576020028201915b815481526020019060010190808311610a47575b505050505090506000610a70826107d0612151565b905060005b6003811015610b94578415610acc57858160038110610a9757610a9661271c565b5b6020020135838260038110610aaf57610aae61271c565b5b60200201818151610ac09190612988565b91508181525050610b81565b858160038110610adf57610ade61271c565b5b6020020135838260038110610af757610af661271c565b5b60200201511015610b3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3490612b2f565b60405180910390fd5b858160038110610b5057610b4f61271c565b5b6020020135838260038110610b6857610b6761271c565b5b60200201818151610b7991906128b2565b915081815250505b8080610b8c90612b4f565b915050610a75565b506000610ba3836107d0612151565b90506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c389190612760565b9050600086610c52578284610c4d91906128b2565b610c5f565b8383610c5e91906128b2565b5b905060008403610c7757600095505050505050610c96565b838282610c8491906128e6565b610c8e9190612957565b955050505050505b92915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610cca611ccb565b60006004600380602002604051908101604052809291908260038015610d05576020028201915b815481526020019060010190808311610cf1575b50505050509050610d146123c0565b600084600060038110610d2a57610d2961271c565b5b6020020135118015610d545750600084600160038110610d4d57610d4c61271c565b5b6020020135115b8015610d785750600084600260038110610d7157610d7061271c565b5b6020020135115b610db7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dae90612c09565b60405180910390fd5b60005b6003811015610fee576000858260038110610dd857610dd761271c565b5b60200201351115610fdd57600060018260038110610df957610df861271c565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e589190612647565b602060405180830381865afa158015610e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e999190612760565b90508173ffffffffffffffffffffffffffffffffffffffff166323b872dd33308a8760038110610ecc57610ecb61271c565b5b60200201356040518463ffffffff1660e01b8152600401610eef9392919061278d565b6020604051808303816000875af1158015610f0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3291906127d9565b5060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f6e9190612647565b602060405180830381865afa158015610f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faf9190612760565b90508181610fbd91906128b2565b868560038110610fd057610fcf61271c565b5b6020020181815250505050505b80610fe790612b4f565b9050610dba565b506000610ffd836107d0612151565b90506000670de0b6b3a7640000808361101691906128e6565b6110209190612957565b905084811015611065576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105c90612c9b565b60405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016110c2929190612aba565b6020604051808303816000875af11580156110e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110591906127d9565b5060005b6003811015611154578481600381106111255761112461271c565b5b60200201516004826003811061113e5761113d61271c565b5b01819055508061114d90612b4f565b9050611109565b506000600367ffffffffffffffff81111561117257611171612cbb565b5b6040519080825280602002602001820160405280156111a05781602001602082028036833780820191505090505b5090506000600367ffffffffffffffff8111156111c0576111bf612cbb565b5b6040519080825280602002602001820160405280156111ee5781602001602082028036833780820191505090505b50905060005b600381101561127e578881600381106112105761120f61271c565b5b60200201358382815181106112285761122761271c565b5b6020026020010181815250508581600381106112475761124661271c565b5b602002015182828151811061125f5761125e61271c565b5b602002602001018181525050808061127690612b4f565b9150506111f4565b503373ffffffffffffffffffffffffffffffffffffffff167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a2838387876040516112cb9493929190612da8565b60405180910390a25050505050506112e1612147565b5050565b6112ed611ccb565b6112f56123c0565b60006008600360075461130891906128e6565b6113129190612957565b9050600060085490506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561138a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ae9190612760565b9050600081116113f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ea90612e6d565b60405180910390fd5b600061143e6004600380602002604051908101604052809291908260038015611431576020028201915b81548152602001906001019080831161141d575b50505050506107d0612151565b90506000600460038060200260405190810160405280929190826003801561147b576020028201915b815481526020019060010190808311611467575b5050505050905060005b60038110156116d95760008982600381106114a3576114a261271c565b5b602002013511156116c8576000600182600381106114c4576114c361271c565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115239190612647565b602060405180830381865afa158015611540573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115649190612760565b90508173ffffffffffffffffffffffffffffffffffffffff166323b872dd33308e87600381106115975761159661271c565b5b60200201356040518463ffffffff1660e01b81526004016115ba9392919061278d565b6020604051808303816000875af11580156115d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fd91906127d9565b5060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116399190612647565b602060405180830381865afa158015611656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167a9190612760565b9050818161168891906128b2565b6004856003811061169c5761169b61271c565b5b01546116a89190612988565b8585600381106116bb576116ba61271c565b5b6020020181815250505050505b806116d290612b4f565b9050611485565b5060006116e8826107d0612151565b905082811161172c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172390612ed9565b60405180910390fd5b600083848361173b91906128b2565b8661174691906128e6565b6117509190612957565b905088811015611795576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178c90612c9b565b60405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016117f2929190612aba565b6020604051808303816000875af1158015611811573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183591906127d9565b5060005b60038110156119dc57600085600483600381106118595761185861271c565b5b01548561186691906128e6565b6118709190612957565b905060008583600381106118875761188661271c565b5b602002015182116118ba57818684600381106118a6576118a561271c565b5b60200201516118b591906128b2565b6118de565b8583600381106118cd576118cc61271c565b5b6020020151826118dd91906128b2565b5b90506402540be400818b6118f291906128e6565b6118fc9190612957565b8b846003811061190f5761190e61271c565b5b6020020181815250508a836003811061192b5761192a61271c565b5b60200201518684600381106119435761194261271c565b5b6020020181815161195491906128b2565b915081815250506402540be400898c85600381106119755761197461271c565b5b602002015161198491906128e6565b61198e9190612957565b8684600381106119a1576119a061271c565b5b60200201516119b091906128b2565b600484600381106119c4576119c361271c565b5b01819055505050806119d590612b4f565b9050611839565b506000600367ffffffffffffffff8111156119fa576119f9612cbb565b5b604051908082528060200260200182016040528015611a285781602001602082028036833780820191505090505b5090506000600367ffffffffffffffff811115611a4857611a47612cbb565b5b604051908082528060200260200182016040528015611a765781602001602082028036833780820191505090505b50905060005b6003811015611b06578c8160038110611a9857611a9761271c565b5b6020020135838281518110611ab057611aaf61271c565b5b6020026020010181815250508a8160038110611acf57611ace61271c565b5b6020020151828281518110611ae757611ae661271c565b5b6020026020010181815250508080611afe90612b4f565b915050611a7c565b503373ffffffffffffffffffffffffffffffffffffffff167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a2838387878c611b4e9190612988565b604051611b5e9493929190612da8565b60405180910390a250505050505050505050611b78612147565b5050565b60018160038110611b8c57600080fd5b016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b600080611bce611bc6611d73565b6107d061216d565b90506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c639190612760565b905060008103611c7857600092505050611c9c565b80670de0b6b3a764000083611c8d91906128e6565b611c979190612957565b925050505b90565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b600260005403611d07576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b60008082600f0b1215611d59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5090612f45565b60405180910390fd5b816fffffffffffffffffffffffffffffffff169050919050565b611d7b6123c0565b611d836123c0565b60005b6003811015611e0757670de0b6b3a764000060048260038110611dac57611dab61271c565b5b0154600b8360038110611dc257611dc161271c565b5b0154611dce91906128e6565b611dd89190612957565b828260038110611deb57611dea61271c565b5b6020020181815250508080611dff90612b4f565b915050611d86565b508091505090565b600083600f0b85600f0b03611e59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5090612fb1565b60405180910390fd5b600084600f0b12158015611e7557506003611e7385611d11565b105b611eb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eab9061301d565b60405180910390fd5b600085600f0b12158015611ed057506003611ece86611d11565b105b611f0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0690613089565b60405180910390fd5b6000611f1d836107d061216d565b9050600081905060008061177090506000805b600381101561200e57611f428b611d11565b8103611f5057889150611f84565b611f598a611d11565b8114611f7e57878160038110611f7257611f7161271c565b5b60200201519150611f83565b611ffb565b5b8184611f909190612988565b9350600382611f9f91906128e6565b8686611fab91906128e6565b611fb59190612957565b945085851015611ffa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff1906130f5565b60405180910390fd5b5b808061200690612b4f565b915050611f30565b5060038261201c91906128e6565b858561202891906128e6565b6120329190612957565b9350600082866120429190612957565b8461204d9190612988565b905060008087905060005b60ff81101561213357819250888483600261207391906128e6565b61207d9190612988565b61208791906128b2565b88838461209491906128e6565b61209e9190612988565b6120a89190612957565b915082821180156120c55750600183836120c291906128b2565b11155b61213357600182846120d791906128b2565b11156121335782821015612120576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211790613161565b60405180910390fd5b808061212b90612b4f565b915050612058565b508098505050505050505050949350505050565b6001600081905550565b600061216561215f84612320565b8361216d565b905092915050565b6000806000905060005b60038110156121b8578481600381106121935761219261271c565b5b6020020151826121a39190612988565b915080806121b090612b4f565b915050612177565b50600081036121cb57600091505061231a565b600081905060006003856121df91906128e6565b905060005b60ff81101561231257600083905060005b600381101561224d5760038982600381106122135761221261271c565b5b602002015161222291906128e6565b858361222e91906128e6565b6122389190612957565b9150808061224590612b4f565b9150506121f5565b50600084905081600461226091906128e6565b8560018661226e91906128b2565b61227891906128e6565b6122829190612988565b8560038461229091906128e6565b888761229c91906128e6565b6122a69190612988565b6122b091906128e6565b6122ba9190612957565b945080851180156122d75750600181866122d491906128b2565b11155b156122e3575050612312565b600185826122f191906128b2565b116122fd575050612312565b5050808061230a90612b4f565b9150506121e4565b508193505050505b92915050565b6123286123c0565b6123306123c0565b60005b60038110156123b657670de0b6b3a76400008482600381106123585761235761271c565b5b6020020151600b83600381106123715761237061271c565b5b015461237d91906128e6565b6123879190612957565b82826003811061239a5761239961271c565b5b60200201818152505080806123ae90612b4f565b915050612333565b5080915050919050565b6040518060600160405280600390602082028036833780820191505090505090565b600080fd5b600081600f0b9050919050565b6123fd816123e7565b811461240857600080fd5b50565b60008135905061241a816123f4565b92915050565b6000819050919050565b61243381612420565b811461243e57600080fd5b50565b6000813590506124508161242a565b92915050565b600080600080608085870312156124705761246f6123e2565b5b600061247e8782880161240b565b945050602061248f8782880161240b565b93505060406124a087828801612441565b92505060606124b187828801612441565b91505092959194509250565b6000602082840312156124d3576124d26123e2565b5b60006124e184828501612441565b91505092915050565b6124f381612420565b82525050565b600060208201905061250e60008301846124ea565b92915050565b60008060006060848603121561252d5761252c6123e2565b5b600061253b8682870161240b565b935050602061254c8682870161240b565b925050604061255d86828701612441565b9150509250925092565b600080fd5b60008190508260206003028201111561258857612587612567565b5b92915050565b60008115159050919050565b6125a38161258e565b81146125ae57600080fd5b50565b6000813590506125c08161259a565b92915050565b600080608083850312156125dd576125dc6123e2565b5b60006125eb8582860161256c565b92505060606125fc858286016125b1565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061263182612606565b9050919050565b61264181612626565b82525050565b600060208201905061265c6000830184612638565b92915050565b60008060808385031215612679576126786123e2565b5b60006126878582860161256c565b925050606061269885828601612441565b9150509250929050565b6000819050919050565b60006126c76126c26126bd84612606565b6126a2565b612606565b9050919050565b60006126d9826126ac565b9050919050565b60006126eb826126ce565b9050919050565b6126fb816126e0565b82525050565b600060208201905061271660008301846126f2565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151905061275a8161242a565b92915050565b600060208284031215612776576127756123e2565b5b60006127848482850161274b565b91505092915050565b60006060820190506127a26000830186612638565b6127af6020830185612638565b6127bc60408301846124ea565b949350505050565b6000815190506127d38161259a565b92915050565b6000602082840312156127ef576127ee6123e2565b5b60006127fd848285016127c4565b91505092915050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b600061284d600f83612806565b915061285882612817565b602082019050919050565b6000602082019050818103600083015261287c81612840565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128bd82612420565b91506128c883612420565b92508282039050818111156128e0576128df612883565b5b92915050565b60006128f182612420565b91506128fc83612420565b925082820261290a81612420565b9150828204841483151761292157612920612883565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061296282612420565b915061296d83612420565b92508261297d5761297c612928565b5b828204905092915050565b600061299382612420565b915061299e83612420565b92508282019050808211156129b6576129b5612883565b5b92915050565b7f4f766572666c6f7720696e20782063616c63756c6174696f6e00000000000000600082015250565b60006129f2601983612806565b91506129fd826129bc565b602082019050919050565b60006020820190508181036000830152612a21816129e5565b9050919050565b7f45786368616e676520726573756c74656420696e20666577657220636f696e7360008201527f207468616e206578706563746564000000000000000000000000000000000000602082015250565b6000612a84602e83612806565b9150612a8f82612a28565b604082019050919050565b60006020820190508181036000830152612ab381612a77565b9050919050565b6000604082019050612acf6000830185612638565b612adc60208301846124ea565b9392505050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000612b19601483612806565b9150612b2482612ae3565b602082019050919050565b60006020820190508181036000830152612b4881612b0c565b9050919050565b6000612b5a82612420565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b8c57612b8b612883565b5b600182019050919050565b7f496e697469616c206465706f73697420726571756972657320616c6c20636f6960008201527f6e7320746f206265206e6f6e2d7a65726f000000000000000000000000000000602082015250565b6000612bf3603183612806565b9150612bfe82612b97565b604082019050919050565b60006020820190508181036000830152612c2281612be6565b9050919050565b7f4d696e7420616d6f756e742062656c6f77206d696e696d756d206d696e74206160008201527f6d6f756e74000000000000000000000000000000000000000000000000000000602082015250565b6000612c85602583612806565b9150612c9082612c29565b604082019050919050565b60006020820190508181036000830152612cb481612c78565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612d1f81612420565b82525050565b6000612d318383612d16565b60208301905092915050565b6000602082019050919050565b6000612d5582612cea565b612d5f8185612cf5565b9350612d6a83612d06565b8060005b83811015612d9b578151612d828882612d25565b9750612d8d83612d3d565b925050600181019050612d6e565b5085935050505092915050565b60006080820190508181036000830152612dc28187612d4a565b90508181036020830152612dd68186612d4a565b9050612de560408301856124ea565b612df260608301846124ea565b95945050505050565b7f546f6b656e20737570706c79206d75737420626520677265617465722074686160008201527f6e20300000000000000000000000000000000000000000000000000000000000602082015250565b6000612e57602383612806565b9150612e6282612dfb565b604082019050919050565b60006020820190508181036000830152612e8681612e4a565b9050919050565b7f4431206d7573742062652067726561746572207468616e204430000000000000600082015250565b6000612ec3601a83612806565b9150612ece82612e8d565b602082019050919050565b60006020820190508181036000830152612ef281612eb6565b9050919050565b7f4e656761746976652076616c7565206e6f7420616c6c6f776564000000000000600082015250565b6000612f2f601a83612806565b9150612f3a82612ef9565b602082019050919050565b60006020820190508181036000830152612f5e81612f22565b9050919050565b7f53616d6520636f696e0000000000000000000000000000000000000000000000600082015250565b6000612f9b600983612806565b9150612fa682612f65565b602082019050919050565b60006020820190508181036000830152612fca81612f8e565b9050919050565b7f6a206f7574206f662072616e6765000000000000000000000000000000000000600082015250565b6000613007600e83612806565b915061301282612fd1565b602082019050919050565b6000602082019050818103600083015261303681612ffa565b9050919050565b7f69206f7574206f662072616e6765000000000000000000000000000000000000600082015250565b6000613073600e83612806565b915061307e8261303d565b602082019050919050565b600060208201905081810360008301526130a281613066565b9050919050565b7f4f766572666c6f7720696e20632063616c63756c6174696f6e00000000000000600082015250565b60006130df601983612806565b91506130ea826130a9565b602082019050919050565b6000602082019050818103600083015261310e816130d2565b9050919050565b7f4f766572666c6f7720696e20792063616c63756c6174696f6e00000000000000600082015250565b600061314b601983612806565b915061315682613115565b602082019050919050565b6000602082019050818103600083015261317a8161313e565b905091905056fea264697066735822122003bc9e4509ebf695fbd26372ce60fadc01e17514daaa4764d32741ead266606164736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c8063a4bf044611610064578063a4bf0446146101d3578063c6610657146101ef578063ddca3f431461022c578063e25aa5fa14610257578063fc0c546a14610282578063fee3f7f9146102ad576100a7565b80633df02124146100ac5780634903b0d1146100d55780635e0d443f1461011257806361383eef1461014f5780638da5cb5b1461018c5780639dca8a4c146101b7575b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce9190612456565b6102d8565b005b3480156100e157600080fd5b506100fc60048036038101906100f791906124bd565b610884565b60405161010991906124f9565b60405180910390f35b34801561011e57600080fd5b5061013960048036038101906101349190612514565b61089f565b60405161014691906124f9565b60405180910390f35b34801561015b57600080fd5b50610176600480360381019061017191906125c6565b610a1f565b60405161018391906124f9565b60405180910390f35b34801561019857600080fd5b506101a1610c9c565b6040516101ae9190612647565b60405180910390f35b6101d160048036038101906101cc9190612662565b610cc2565b005b6101ed60048036038101906101e89190612662565b6112e5565b005b3480156101fb57600080fd5b50610216600480360381019061021191906124bd565b611b7c565b6040516102239190612647565b60405180910390f35b34801561023857600080fd5b50610241611bb2565b60405161024e91906124f9565b60405180910390f35b34801561026357600080fd5b5061026c611bb8565b60405161027991906124f9565b60405180910390f35b34801561028e57600080fd5b50610297611c9f565b6040516102a49190612701565b60405180910390f35b3480156102b957600080fd5b506102c2611cc5565b6040516102cf91906124f9565b60405180910390f35b6102e0611ccb565b60006102eb85611d11565b905060006102f885611d11565b90506000600183600381106103105761030f61271c565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006001836003811061034a5761034961271c565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103a99190612647565b602060405180830381865afa1580156103c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ea9190612760565b905060008373ffffffffffffffffffffffffffffffffffffffff166323b872dd33308b6040518463ffffffff1660e01b815260040161042b9392919061278d565b6020604051808303816000875af115801561044a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046e91906127d9565b9050806104b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a790612863565b60405180910390fd5b6000600287146104c05788610546565b828573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104fa9190612647565b602060405180830381865afa158015610517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053b9190612760565b61054591906128b2565b5b90506000610552611d73565b90506000670de0b6b3a7640000600b8a600381106105735761057261271c565b5b01548461058091906128e6565b61058a9190612957565b828a6003811061059d5761059c61271c565b5b60200201516105ac9190612988565b90508189600381106105c1576105c061271c565b5b6020020151811015610608576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ff90612a08565b60405180910390fd5b60006106168a8a8486611e0f565b90506000600182858c600381106106305761062f61271c565b5b602002015161063f91906128b2565b61064991906128b2565b905060006402540be4006007548361066191906128e6565b61066b9190612957565b90506000600b8c600381106106835761068261271c565b5b0154670de0b6b3a76400006402540be400600854856106a291906128e6565b6106ac9190612957565b6106b691906128e6565b6106c09190612957565b9050600b8c600381106106d6576106d561271c565b5b0154670de0b6b3a764000083856106ed91906128b2565b6106f791906128e6565b6107019190612957565b92508d831015610746576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073d90612a9a565b60405180910390fd5b8660048e6003811061075b5761075a61271c565b5b01600082825461076b9190612988565b92505081905550808361077e9190612988565b60048d600381106107925761079161271c565b5b0160008282546107a291906128b2565b925050819055508973ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b81526004016107e4929190612aba565b6020604051808303816000875af1158015610803573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082791906127d9565b975087610869576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086090612863565b60405180910390fd5b5050505050505050505050505061087e612147565b50505050565b6004816003811061089457600080fd5b016000915090505481565b600080600b6003806020026040519081016040528092919082600380156108db576020028201915b8154815260200190600101908083116108c7575b5050505050905060006108ec611d73565b90506000670de0b6b3a76400008361090389611d11565b600381106109145761091361271c565b5b60200201518661092491906128e6565b61092e9190612957565b8261093889611d11565b600381106109495761094861271c565b5b60200201516109589190612988565b9050600061096888888486611e0f565b905060008461097689611d11565b600381106109875761098661271c565b5b6020020151670de0b6b3a7640000600184876109a28d611d11565b600381106109b3576109b261271c565b5b60200201516109c291906128b2565b6109cc91906128b2565b6109d691906128e6565b6109e09190612957565b905060006402540be400826007546109f891906128e6565b610a029190612957565b90508082610a1091906128b2565b96505050505050509392505050565b6000806004600380602002604051908101604052809291908260038015610a5b576020028201915b815481526020019060010190808311610a47575b505050505090506000610a70826107d0612151565b905060005b6003811015610b94578415610acc57858160038110610a9757610a9661271c565b5b6020020135838260038110610aaf57610aae61271c565b5b60200201818151610ac09190612988565b91508181525050610b81565b858160038110610adf57610ade61271c565b5b6020020135838260038110610af757610af661271c565b5b60200201511015610b3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3490612b2f565b60405180910390fd5b858160038110610b5057610b4f61271c565b5b6020020135838260038110610b6857610b6761271c565b5b60200201818151610b7991906128b2565b915081815250505b8080610b8c90612b4f565b915050610a75565b506000610ba3836107d0612151565b90506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c389190612760565b9050600086610c52578284610c4d91906128b2565b610c5f565b8383610c5e91906128b2565b5b905060008403610c7757600095505050505050610c96565b838282610c8491906128e6565b610c8e9190612957565b955050505050505b92915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610cca611ccb565b60006004600380602002604051908101604052809291908260038015610d05576020028201915b815481526020019060010190808311610cf1575b50505050509050610d146123c0565b600084600060038110610d2a57610d2961271c565b5b6020020135118015610d545750600084600160038110610d4d57610d4c61271c565b5b6020020135115b8015610d785750600084600260038110610d7157610d7061271c565b5b6020020135115b610db7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dae90612c09565b60405180910390fd5b60005b6003811015610fee576000858260038110610dd857610dd761271c565b5b60200201351115610fdd57600060018260038110610df957610df861271c565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e589190612647565b602060405180830381865afa158015610e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e999190612760565b90508173ffffffffffffffffffffffffffffffffffffffff166323b872dd33308a8760038110610ecc57610ecb61271c565b5b60200201356040518463ffffffff1660e01b8152600401610eef9392919061278d565b6020604051808303816000875af1158015610f0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3291906127d9565b5060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f6e9190612647565b602060405180830381865afa158015610f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faf9190612760565b90508181610fbd91906128b2565b868560038110610fd057610fcf61271c565b5b6020020181815250505050505b80610fe790612b4f565b9050610dba565b506000610ffd836107d0612151565b90506000670de0b6b3a7640000808361101691906128e6565b6110209190612957565b905084811015611065576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105c90612c9b565b60405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016110c2929190612aba565b6020604051808303816000875af11580156110e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110591906127d9565b5060005b6003811015611154578481600381106111255761112461271c565b5b60200201516004826003811061113e5761113d61271c565b5b01819055508061114d90612b4f565b9050611109565b506000600367ffffffffffffffff81111561117257611171612cbb565b5b6040519080825280602002602001820160405280156111a05781602001602082028036833780820191505090505b5090506000600367ffffffffffffffff8111156111c0576111bf612cbb565b5b6040519080825280602002602001820160405280156111ee5781602001602082028036833780820191505090505b50905060005b600381101561127e578881600381106112105761120f61271c565b5b60200201358382815181106112285761122761271c565b5b6020026020010181815250508581600381106112475761124661271c565b5b602002015182828151811061125f5761125e61271c565b5b602002602001018181525050808061127690612b4f565b9150506111f4565b503373ffffffffffffffffffffffffffffffffffffffff167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a2838387876040516112cb9493929190612da8565b60405180910390a25050505050506112e1612147565b5050565b6112ed611ccb565b6112f56123c0565b60006008600360075461130891906128e6565b6113129190612957565b9050600060085490506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561138a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ae9190612760565b9050600081116113f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ea90612e6d565b60405180910390fd5b600061143e6004600380602002604051908101604052809291908260038015611431576020028201915b81548152602001906001019080831161141d575b50505050506107d0612151565b90506000600460038060200260405190810160405280929190826003801561147b576020028201915b815481526020019060010190808311611467575b5050505050905060005b60038110156116d95760008982600381106114a3576114a261271c565b5b602002013511156116c8576000600182600381106114c4576114c361271c565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115239190612647565b602060405180830381865afa158015611540573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115649190612760565b90508173ffffffffffffffffffffffffffffffffffffffff166323b872dd33308e87600381106115975761159661271c565b5b60200201356040518463ffffffff1660e01b81526004016115ba9392919061278d565b6020604051808303816000875af11580156115d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fd91906127d9565b5060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116399190612647565b602060405180830381865afa158015611656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167a9190612760565b9050818161168891906128b2565b6004856003811061169c5761169b61271c565b5b01546116a89190612988565b8585600381106116bb576116ba61271c565b5b6020020181815250505050505b806116d290612b4f565b9050611485565b5060006116e8826107d0612151565b905082811161172c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172390612ed9565b60405180910390fd5b600083848361173b91906128b2565b8661174691906128e6565b6117509190612957565b905088811015611795576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178c90612c9b565b60405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016117f2929190612aba565b6020604051808303816000875af1158015611811573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183591906127d9565b5060005b60038110156119dc57600085600483600381106118595761185861271c565b5b01548561186691906128e6565b6118709190612957565b905060008583600381106118875761188661271c565b5b602002015182116118ba57818684600381106118a6576118a561271c565b5b60200201516118b591906128b2565b6118de565b8583600381106118cd576118cc61271c565b5b6020020151826118dd91906128b2565b5b90506402540be400818b6118f291906128e6565b6118fc9190612957565b8b846003811061190f5761190e61271c565b5b6020020181815250508a836003811061192b5761192a61271c565b5b60200201518684600381106119435761194261271c565b5b6020020181815161195491906128b2565b915081815250506402540be400898c85600381106119755761197461271c565b5b602002015161198491906128e6565b61198e9190612957565b8684600381106119a1576119a061271c565b5b60200201516119b091906128b2565b600484600381106119c4576119c361271c565b5b01819055505050806119d590612b4f565b9050611839565b506000600367ffffffffffffffff8111156119fa576119f9612cbb565b5b604051908082528060200260200182016040528015611a285781602001602082028036833780820191505090505b5090506000600367ffffffffffffffff811115611a4857611a47612cbb565b5b604051908082528060200260200182016040528015611a765781602001602082028036833780820191505090505b50905060005b6003811015611b06578c8160038110611a9857611a9761271c565b5b6020020135838281518110611ab057611aaf61271c565b5b6020026020010181815250508a8160038110611acf57611ace61271c565b5b6020020151828281518110611ae757611ae661271c565b5b6020026020010181815250508080611afe90612b4f565b915050611a7c565b503373ffffffffffffffffffffffffffffffffffffffff167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a2838387878c611b4e9190612988565b604051611b5e9493929190612da8565b60405180910390a250505050505050505050611b78612147565b5050565b60018160038110611b8c57600080fd5b016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b600080611bce611bc6611d73565b6107d061216d565b90506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c639190612760565b905060008103611c7857600092505050611c9c565b80670de0b6b3a764000083611c8d91906128e6565b611c979190612957565b925050505b90565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b600260005403611d07576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b60008082600f0b1215611d59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5090612f45565b60405180910390fd5b816fffffffffffffffffffffffffffffffff169050919050565b611d7b6123c0565b611d836123c0565b60005b6003811015611e0757670de0b6b3a764000060048260038110611dac57611dab61271c565b5b0154600b8360038110611dc257611dc161271c565b5b0154611dce91906128e6565b611dd89190612957565b828260038110611deb57611dea61271c565b5b6020020181815250508080611dff90612b4f565b915050611d86565b508091505090565b600083600f0b85600f0b03611e59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5090612fb1565b60405180910390fd5b600084600f0b12158015611e7557506003611e7385611d11565b105b611eb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eab9061301d565b60405180910390fd5b600085600f0b12158015611ed057506003611ece86611d11565b105b611f0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0690613089565b60405180910390fd5b6000611f1d836107d061216d565b9050600081905060008061177090506000805b600381101561200e57611f428b611d11565b8103611f5057889150611f84565b611f598a611d11565b8114611f7e57878160038110611f7257611f7161271c565b5b60200201519150611f83565b611ffb565b5b8184611f909190612988565b9350600382611f9f91906128e6565b8686611fab91906128e6565b611fb59190612957565b945085851015611ffa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff1906130f5565b60405180910390fd5b5b808061200690612b4f565b915050611f30565b5060038261201c91906128e6565b858561202891906128e6565b6120329190612957565b9350600082866120429190612957565b8461204d9190612988565b905060008087905060005b60ff81101561213357819250888483600261207391906128e6565b61207d9190612988565b61208791906128b2565b88838461209491906128e6565b61209e9190612988565b6120a89190612957565b915082821180156120c55750600183836120c291906128b2565b11155b61213357600182846120d791906128b2565b11156121335782821015612120576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211790613161565b60405180910390fd5b808061212b90612b4f565b915050612058565b508098505050505050505050949350505050565b6001600081905550565b600061216561215f84612320565b8361216d565b905092915050565b6000806000905060005b60038110156121b8578481600381106121935761219261271c565b5b6020020151826121a39190612988565b915080806121b090612b4f565b915050612177565b50600081036121cb57600091505061231a565b600081905060006003856121df91906128e6565b905060005b60ff81101561231257600083905060005b600381101561224d5760038982600381106122135761221261271c565b5b602002015161222291906128e6565b858361222e91906128e6565b6122389190612957565b9150808061224590612b4f565b9150506121f5565b50600084905081600461226091906128e6565b8560018661226e91906128b2565b61227891906128e6565b6122829190612988565b8560038461229091906128e6565b888761229c91906128e6565b6122a69190612988565b6122b091906128e6565b6122ba9190612957565b945080851180156122d75750600181866122d491906128b2565b11155b156122e3575050612312565b600185826122f191906128b2565b116122fd575050612312565b5050808061230a90612b4f565b9150506121e4565b508193505050505b92915050565b6123286123c0565b6123306123c0565b60005b60038110156123b657670de0b6b3a76400008482600381106123585761235761271c565b5b6020020151600b83600381106123715761237061271c565b5b015461237d91906128e6565b6123879190612957565b82826003811061239a5761239961271c565b5b60200201818152505080806123ae90612b4f565b915050612333565b5080915050919050565b6040518060600160405280600390602082028036833780820191505090505090565b600080fd5b600081600f0b9050919050565b6123fd816123e7565b811461240857600080fd5b50565b60008135905061241a816123f4565b92915050565b6000819050919050565b61243381612420565b811461243e57600080fd5b50565b6000813590506124508161242a565b92915050565b600080600080608085870312156124705761246f6123e2565b5b600061247e8782880161240b565b945050602061248f8782880161240b565b93505060406124a087828801612441565b92505060606124b187828801612441565b91505092959194509250565b6000602082840312156124d3576124d26123e2565b5b60006124e184828501612441565b91505092915050565b6124f381612420565b82525050565b600060208201905061250e60008301846124ea565b92915050565b60008060006060848603121561252d5761252c6123e2565b5b600061253b8682870161240b565b935050602061254c8682870161240b565b925050604061255d86828701612441565b9150509250925092565b600080fd5b60008190508260206003028201111561258857612587612567565b5b92915050565b60008115159050919050565b6125a38161258e565b81146125ae57600080fd5b50565b6000813590506125c08161259a565b92915050565b600080608083850312156125dd576125dc6123e2565b5b60006125eb8582860161256c565b92505060606125fc858286016125b1565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061263182612606565b9050919050565b61264181612626565b82525050565b600060208201905061265c6000830184612638565b92915050565b60008060808385031215612679576126786123e2565b5b60006126878582860161256c565b925050606061269885828601612441565b9150509250929050565b6000819050919050565b60006126c76126c26126bd84612606565b6126a2565b612606565b9050919050565b60006126d9826126ac565b9050919050565b60006126eb826126ce565b9050919050565b6126fb816126e0565b82525050565b600060208201905061271660008301846126f2565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151905061275a8161242a565b92915050565b600060208284031215612776576127756123e2565b5b60006127848482850161274b565b91505092915050565b60006060820190506127a26000830186612638565b6127af6020830185612638565b6127bc60408301846124ea565b949350505050565b6000815190506127d38161259a565b92915050565b6000602082840312156127ef576127ee6123e2565b5b60006127fd848285016127c4565b91505092915050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b600061284d600f83612806565b915061285882612817565b602082019050919050565b6000602082019050818103600083015261287c81612840565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128bd82612420565b91506128c883612420565b92508282039050818111156128e0576128df612883565b5b92915050565b60006128f182612420565b91506128fc83612420565b925082820261290a81612420565b9150828204841483151761292157612920612883565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061296282612420565b915061296d83612420565b92508261297d5761297c612928565b5b828204905092915050565b600061299382612420565b915061299e83612420565b92508282019050808211156129b6576129b5612883565b5b92915050565b7f4f766572666c6f7720696e20782063616c63756c6174696f6e00000000000000600082015250565b60006129f2601983612806565b91506129fd826129bc565b602082019050919050565b60006020820190508181036000830152612a21816129e5565b9050919050565b7f45786368616e676520726573756c74656420696e20666577657220636f696e7360008201527f207468616e206578706563746564000000000000000000000000000000000000602082015250565b6000612a84602e83612806565b9150612a8f82612a28565b604082019050919050565b60006020820190508181036000830152612ab381612a77565b9050919050565b6000604082019050612acf6000830185612638565b612adc60208301846124ea565b9392505050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000612b19601483612806565b9150612b2482612ae3565b602082019050919050565b60006020820190508181036000830152612b4881612b0c565b9050919050565b6000612b5a82612420565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b8c57612b8b612883565b5b600182019050919050565b7f496e697469616c206465706f73697420726571756972657320616c6c20636f6960008201527f6e7320746f206265206e6f6e2d7a65726f000000000000000000000000000000602082015250565b6000612bf3603183612806565b9150612bfe82612b97565b604082019050919050565b60006020820190508181036000830152612c2281612be6565b9050919050565b7f4d696e7420616d6f756e742062656c6f77206d696e696d756d206d696e74206160008201527f6d6f756e74000000000000000000000000000000000000000000000000000000602082015250565b6000612c85602583612806565b9150612c9082612c29565b604082019050919050565b60006020820190508181036000830152612cb481612c78565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612d1f81612420565b82525050565b6000612d318383612d16565b60208301905092915050565b6000602082019050919050565b6000612d5582612cea565b612d5f8185612cf5565b9350612d6a83612d06565b8060005b83811015612d9b578151612d828882612d25565b9750612d8d83612d3d565b925050600181019050612d6e565b5085935050505092915050565b60006080820190508181036000830152612dc28187612d4a565b90508181036020830152612dd68186612d4a565b9050612de560408301856124ea565b612df260608301846124ea565b95945050505050565b7f546f6b656e20737570706c79206d75737420626520677265617465722074686160008201527f6e20300000000000000000000000000000000000000000000000000000000000602082015250565b6000612e57602383612806565b9150612e6282612dfb565b604082019050919050565b60006020820190508181036000830152612e8681612e4a565b9050919050565b7f4431206d7573742062652067726561746572207468616e204430000000000000600082015250565b6000612ec3601a83612806565b9150612ece82612e8d565b602082019050919050565b60006020820190508181036000830152612ef281612eb6565b9050919050565b7f4e656761746976652076616c7565206e6f7420616c6c6f776564000000000000600082015250565b6000612f2f601a83612806565b9150612f3a82612ef9565b602082019050919050565b60006020820190508181036000830152612f5e81612f22565b9050919050565b7f53616d6520636f696e0000000000000000000000000000000000000000000000600082015250565b6000612f9b600983612806565b9150612fa682612f65565b602082019050919050565b60006020820190508181036000830152612fca81612f8e565b9050919050565b7f6a206f7574206f662072616e6765000000000000000000000000000000000000600082015250565b6000613007600e83612806565b915061301282612fd1565b602082019050919050565b6000602082019050818103600083015261303681612ffa565b9050919050565b7f69206f7574206f662072616e6765000000000000000000000000000000000000600082015250565b6000613073600e83612806565b915061307e8261303d565b602082019050919050565b600060208201905081810360008301526130a281613066565b9050919050565b7f4f766572666c6f7720696e20632063616c63756c6174696f6e00000000000000600082015250565b60006130df601983612806565b91506130ea826130a9565b602082019050919050565b6000602082019050818103600083015261310e816130d2565b9050919050565b7f4f766572666c6f7720696e20792063616c63756c6174696f6e00000000000000600082015250565b600061314b601983612806565b915061315682613115565b602082019050919050565b6000602082019050818103600083015261317a8161313e565b905091905056fea264697066735822122003bc9e4509ebf695fbd26372ce60fadc01e17514daaa4764d32741ead266606164736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 88,
        "contract": "contracts/Carom_fin.sol:Carom",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 217,
        "contract": "contracts/Carom_fin.sol:Carom",
        "label": "coins",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)3_storage"
      },
      {
        "astId": 221,
        "contract": "contracts/Carom_fin.sol:Carom",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)3_storage"
      },
      {
        "astId": 223,
        "contract": "contracts/Carom_fin.sol:Carom",
        "label": "fee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 225,
        "contract": "contracts/Carom_fin.sol:Carom",
        "label": "admin_fee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 227,
        "contract": "contracts/Carom_fin.sol:Carom",
        "label": "owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 230,
        "contract": "contracts/Carom_fin.sol:Carom",
        "label": "token",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(MyToken)175"
      },
      {
        "astId": 238,
        "contract": "contracts/Carom_fin.sol:Carom",
        "label": "RATES",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)3_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)3_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_contract(MyToken)175": {
        "encoding": "inplace",
        "label": "contract MyToken",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}